options:
  logging: CLOUD_LOGGING_ONLY
#https://cloud.google.com/build/docs/configuring-builds/pass-data-between-steps

steps:
  # get cluster creds
  - id: "get cluster creds"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        gcloud container clusters get-credentials $_CLUSTER_NAME --region $_OPS_REGION --project $_OPS_PROJECT_ID
        gcloud auth configure-docker europe-west1-docker.pkg.dev

  # Get Pub/Sub message
  - id: "Get Pub/Sub message"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        gcloud pubsub subscriptions pull "projects/$_OPS_PROJECT_ID/subscriptions/$_OPS_PREFIX-team-create-sub" --format=json --auto-ack | grep data | awk -F'"' '/"data"/ {print $4}' | base64 -d > /workspace/teamsa.txt
        service_account_name=$(cat /workspace/teamsa.txt)
        
        # Extract teamname and teamprojected
        teamname=$(echo "$service_account_name" | awk -F'[@.]' '{print $1}')
        echo $teamname > /workspace/teamname.txt
        teamprojectid=$(echo "$service_account_name" | awk -F'[@.]' '{print $2}')
        echo $teamprojectid > /workspace/teamprojectid.txt
        
        # Merge teamname and teamprojectid
        team_namespace="$teamname-$teamprojectid"
        echo $team_namespace > /workspace/team_namespace.txt

  # Create role binding
  - id: "IAM role container.viewer"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        service_account_name=$(cat /workspace/teamsa.txt)

        gcloud projects add-iam-policy-binding $_OPS_PROJECT_ID \
        --member=serviceAccount:${service_account_name} \
        --role=projects/abel-ghack-infra/roles/ghackteamrcusgermany
        #container.clusters.get
        gcloud projects add-iam-policy-binding $_OPS_PROJECT_ID \
        --member=serviceAccount:${service_account_name} \
        --role=roles/iam.serviceAccountTokenCreator

  # create team namespace
  - id: "GKE create team namespace"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        team_namespace=$(cat /workspace/team_namespace.txt)

        # Create Kubernetes namespace
        kubectl create namespace "$team_namespace"

  # Create role
  - id: "GKE Create role"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        team_namespace=$(cat /workspace/team_namespace.txt)

        #actual role creation
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: ${team_namespace}-role
          namespace: $team_namespace
        rules:
        - apiGroups: ["","apps"]
          resources: ["*"]
          verbs: ["*"]
        EOF
#https://stackoverflow.com/questions/64815650/how-to-block-exec-into-a-pod-using-rbac
#verbs: ["get", "watch", "list"]

  # Create role binding
  - id: "GKE Binding role"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        service_account_name=$(cat /workspace/teamsa.txt)
        team_namespace=$(cat /workspace/team_namespace.txt)

        # Create role binding
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: ${team_namespace}-binding
          namespace: $team_namespace
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: ${team_namespace}-role
        subjects:
        - kind: User
          name: "${service_account_name}"
          apiGroup: rbac.authorization.k8s.io
        EOF

  # create team secret
  - id: "Secret generate pass"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        team_namespace=$(cat /workspace/team_namespace.txt)
        
        if gcloud secrets describe "$team_namespace" --project="$_OPS_PROJECT_ID" &> /dev/null; then
            secret_value=$(gcloud secrets versions access latest --secret="$team_namespace" --project="$_OPS_PROJECT_ID")
            echo $secret_value > /workspace/teamsecret.txt
        else
            # Secret does not exist, create a new secret for the team
            gcloud secrets create "$team_namespace" --project="$_OPS_PROJECT_ID"
            pass_gen="$(openssl rand -hex 16)"
            pass_gen_prep="($pass_gen)-nowimpassword:)"
            pass_gen_base64=$(echo $pass_gen_prep | base64)
            pass_final="(${pass_gen_base64})-imnotpasswordyet:(ps.onemore"

            #save for container
            echo $pass_gen > /workspace/teamsecret.txt
            echo "Generated password: $pass_gen"
            echo "Generated password: $pass_gen"
            echo "prepared password: $pass_gen_prep"
            echo "base64 password: $pass_gen_base64"
            echo "Updated password: $pass_final"
            echo -n "$pass_final" | gcloud secrets versions add "$team_namespace" --data-file=- --project="$_OPS_PROJECT_ID"  
        fi
        
  # iam role assesor
  - id: "Secret iam assesor"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        service_account_name=$(cat /workspace/teamsa.txt)
        team_namespace=$(cat /workspace/team_namespace.txt)

        gcloud secrets add-iam-policy-binding "$team_namespace" --member="serviceAccount:$service_account_name" --role="roles/secretmanager.secretAccessor" --project="$_OPS_PROJECT_ID"

    #Build db image and push to Artifact Registry
  - id: "Build db"
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        service_account_name=$(cat /workspace/teamsa.txt)
        pass_gen=$(cat /workspace/teamsecret.txt)
        teamname=$(cat /workspace/teamname.txt)
        team_namespace=$(cat /workspace/team_namespace.txt)

        echo "#################"
        ls -la app_db
        cat app_db/Dockerfile
        pwd
        sed -i '' -e "s/ENV MYSQL_ROOT_PASSWORD=tmppassword/ENV MYSQL_ROOT_PASSWORD=${pass_gen}/g" app_db/Dockerfile
        cat app_db/Dockerfile
        echo "#################"
        docker buildx build --platform linux/amd64 -t gubgubdb:$team_namespace app_db
        docker tag gubgubdb:$team_namespace europe-west1-docker.pkg.dev/abel-ghack-infra/ghack-docker-repo/gubgubdb:$team_namespace
        docker push europe-west1-docker.pkg.dev/abel-ghack-infra/ghack-docker-repo/gubgubdb:$team_namespace
  
  # deploy services manifest
  - id: "GKE - Deploy db-svc "
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        team_namespace=$(cat /workspace/team_namespace.txt)
        
        #db-svc
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: db-svc
          namespace: $team_namespace
        spec:
          selector:
            app: db
          ports:
            - protocol: TCP
              port: 3306
              targetPort: 3306
        EOF

  - id: "GKE - Deploy db"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        team_namespace=$(cat /workspace/team_namespace.txt)
        
        #app-deployment
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: gubgub-db
          namespace: $team_namespace
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: db
          template:
            metadata:
              labels:
                app: db
            spec:
              containers:
              - name: db
                image: europe-west1-docker.pkg.dev/abel-ghack-infra/ghack-docker-repo/gubgubdb:$team_namespace
                ports:
                - containerPort: 3306
        EOF
  #deploy app
  - id: "GKE - Deploy app"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        team_namespace=$(cat /workspace/team_namespace.txt)
        pass_gen=$(cat /workspace/teamsecret.txt)

        #app-deployment
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: gubgub-frontend
          namespace: $team_namespace
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: app
          template:
            metadata:
              labels:
                app: app
            spec:
              containers:
              - name: app
                image: europe-west1-docker.pkg.dev/abel-ghack-infra/ghack-docker-repo/gubgub:latest
                ports:
                - containerPort: 5000
                env:
                - name: MYSQL_PASSWORD
                  value: $pass_gen
        EOF
  # deploy service loadbalancer
  - id: "GKE - Deploy svc-lb"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        team_namespace=$(cat /workspace/team_namespace.txt)

        #svc-lb
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: app-service
          namespace: $team_namespace
        spec:
          type: LoadBalancer
          ports:
            - port: 80
              targetPort: 5000
          selector:
            app: app
        EOF