options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # get cluster creds
  - id: "get cluster creds"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        gcloud container clusters get-credentials $_CLUSTER_NAME --region $_OPS_REGION --project $_OPS_PROJECT_ID
        gcloud auth configure-docker \
        europe-west1-docker.pkg.dev

  # Get Pub/Sub message
  - id: "Get Pub/Sub message"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        gcloud pubsub subscriptions pull "projects/$_OPS_PROJECT_ID/subscriptions/$_OPS_PREFIX-team-create-sub" --format=json --auto-ack | grep data | awk -F'"' '/"data"/ {print $4}' | base64 -d > /workspace/teamsa.txt

  # Create role binding
  - id: "IAM role container.viewer"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        service_account_name=$(cat /workspace/teamsa.txt)

        gcloud projects add-iam-policy-binding $_OPS_PROJECT_ID \
        --member=serviceAccount:${service_account_name} \
        --role=projects/abel-ghack-infra/roles/ghackteamrole
        #container.clusters.get
        gcloud projects add-iam-policy-binding $_OPS_PROJECT_ID \
        --member=serviceAccount:${service_account_name} \
        --role=roles/iam.serviceAccountTokenCreator
# gcloud projects add-iam-policy-binding abel-ghack-infra \
#         --member=serviceAccount:ghack-cluster-sa@abel-ghack-infra.iam.gserviceaccount.com \
#         --role=roles/artifactregistry.reader
#         ghack-cluster-sa@abel-ghack-infra.iam.gserviceaccount.com


  # create team namespace
  - id: "GKE create team namespace"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        service_account_name=$(cat /workspace/teamsa.txt)

        # Extract teamname and teamprojected
        teamname=$(echo "$service_account_name" | awk -F'[@.]' '{print $1}')
        teamprojectid=$(echo "$service_account_name" | awk -F'[@.]' '{print $2}')
        
        # Merge teamname and teamprojectid
        team_namespace="${teamname}-${teamprojectid}"

        # Create Kubernetes namespace
        kubectl create namespace "$team_namespace"

  # Create role
  - id: "GKE Create role"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        service_account_name=$(cat /workspace/teamsa.txt)

        # Extract teamname and teamprojected
        teamname=$(echo "$service_account_name" | awk -F'[@.]' '{print $1}')
        teamprojectid=$(echo "$service_account_name" | awk -F'[@.]' '{print $2}')
        
        # Merge teamname and teamprojectid
        team_namespace="${teamname}-${teamprojectid}"

        #actual role creation
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: ${team_namespace}-role
          namespace: $team_namespace
        rules:
        - apiGroups: ["","apps"]
          resources: ["*"]
          verbs: ["*"]
        EOF

  # Create role binding
  - id: "GKE Binding role"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        service_account_name=$(cat /workspace/teamsa.txt)

        # Extract teamname and teamprojected
        teamname=$(echo "$service_account_name" | awk -F'[@.]' '{print $1}')
        teamprojectid=$(echo "$service_account_name" | awk -F'[@.]' '{print $2}')
        
        # Merge teamname and teamprojectid
        team_namespace="${teamname}-${teamprojectid}"

        # Create role binding
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: ${team_namespace}-binding
          namespace: $team_namespace
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: ${team_namespace}-role
        subjects:
        - kind: User
          name: "${service_account_name}"
          apiGroup: rbac.authorization.k8s.io

        EOF
  # create team secret
  - id: "Secret generate pass"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        service_account_name=$(cat /workspace/teamsa.txt)

        # Extract teamname and teamprojected
        teamname=$(echo "$service_account_name" | awk -F'[@.]' '{print $1}')
        teamprojectid=$(echo "$service_account_name" | awk -F'[@.]' '{print $2}')
        
        # Merge teamname and teamprojectid
        team_namespace="${teamname}-${teamprojectid}"

        # Create a secret for the team
        gcloud secrets create "$team_namespace" --project="$_OPS_PROJECT_ID"

        pass_gen="$(openssl rand -hex 16)"
        pass_gen_prep="($pass_gen)-nowimpassword:)"
        pass_gen_base64=$(echo $pass_gen_prep | base64)
        pass_final="(${pass_gen_base64})-imnotpasswordyet:(ps.onemore"

        #save for container
        echo "Generated password: $pass_gen" > /workspace/teamsecret.txt
        echo "Generated password: $pass_gen"
        echo "prepared password: $pass_gen_prep"
        echo "base64 password: $pass_gen_base64"
        echo "Updated password: $pass_final"

        echo -n "$pass_final" | gcloud secrets versions add "$team_namespace" --data-file=- --project="$_OPS_PROJECT_ID"
  
  # iam role assesor
  - id: "Secret iam assesor"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        service_account_name=$(cat /workspace/teamsa.txt)

        # Extract teamname and teamprojected
        teamname=$(echo "$service_account_name" | awk -F'[@.]' '{print $1}')
        teamprojectid=$(echo "$service_account_name" | awk -F'[@.]' '{print $2}')
        
        # Merge teamname and teamprojectid
        team_namespace="${teamname}-${teamprojectid}"

        gcloud secrets add-iam-policy-binding "$team_namespace" --member="serviceAccount:$service_account_name" --role="roles/secretmanager.secretAccessor" --project="$_OPS_PROJECT_ID"

  # deployemtn services manifest
  - id: "GKE - Deploy application "
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - -x
      - -c
      - |
        #!/bin/bash
        service_account_name=$(cat /workspace/teamsa.txt)
        
        # Extract teamname and teamprojected
        teamname=$(echo "$service_account_name" | awk -F'[@.]' '{print $1}')
        teamprojectid=$(echo "$service_account_name" | awk -F'[@.]' '{print $2}')
        
        # Merge teamname and teamprojectid
        team_namespace="${teamname}-${teamprojectid}"
        team_namespace="xxxx"
        pass_gen="bwewe"
        #actual role creation
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: db-svc
          namespace: $team_namespace
        spec:
          selector:
            app: db
          ports:
            - protocol: TCP
              port: 3306
              targetPort: 3306
        ---
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            app: db
          name: gubgub-db
          namespace: $team_namespace
        spec:
          restartPolicy: Always
          containers:
          - name: db
            image: mysql:latest
            ports:
            - containerPort: 3306
            env:
            - name: MYSQL_DATABASE
              value: game_db
            - name: MYSQL_ROOT_PASSWORD
              value: $pass_gen
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: gubgub-frontend
          namespace: $team_namespace
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: app
          template:
            metadata:
              labels:
                app: app
            spec:
              containers:
              - name: app
                image: europe-west1-docker.pkg.dev/abel-ghack-infra/ghack-docker-repo/gubgub:latest
                ports:
                - containerPort: 5000
                env:
                - name: MYSQL_ROOT_PASSWORD
                  value: password
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: app-service
          namespace: $team_namespace
        spec:
          type: LoadBalancer
          ports:
            - port: 80
              targetPort: 5000
          selector:
            app: app
        EOF